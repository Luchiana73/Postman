{
	"info": {
		"_postman_id": "f74b65ed-dc0b-4b52-bcc7-9a5b3a2e7614",
		"name": "SqlVerifier",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19592828",
		"_collection_link": "https://lively-escape-493280.postman.co/workspace/IT-Switcher~b79d7770-4303-4ec0-beae-27edf996e14d/collection/19592828-f74b65ed-dc0b-4b52-bcc7-9a5b3a2e7614?action=share&source=collection_link&creator=19592828"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\",\r\n    \"rememberMe\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new admin Jessica",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 0,\r\n    \"login\": \"jessica\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"jessica@gmail.com\",\r\n    \"imageUrl\": \"string\",\r\n    \"activated\": true,\r\n    \"langKey\": \"string\",\r\n    \"createdBy\": \"string\",\r\n    \"createdDate\": \"2023-11-23T09:15:33.254Z\",\r\n    \"lastModifiedBy\": \"string\",\r\n    \"lastModifiedDate\": \"2023-11-23T09:15:33.254Z\",\r\n    \"authorities\": [\r\n        \"string\"\r\n    ],\r\n    \"password\": \"dolomiti2023\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register teacher Mark",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 0,\r\n    \"login\": \"mark\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"mark.teacher@gmail.com\",\r\n    \"imageUrl\": \"string\",\r\n    \"activated\": true,\r\n    \"langKey\": \"it\",\r\n    \"createdBy\": \"string\",\r\n    \"createdDate\": \"2023-11-22T10:49:52.690Z\",\r\n    \"lastModifiedBy\": \"string\",\r\n    \"lastModifiedDate\": \"2023-11-22T10:49:52.690Z\",\r\n    \"authorities\": [\r\n        \"string\"\r\n    ],\r\n    \"password\": \"trentino123\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register user student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 0,\r\n    \"login\": \"paola\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"paola@paola.com\",\r\n    \"imageUrl\": \"string\",\r\n    \"activated\": true,\r\n    \"langKey\": \"it\",\r\n    \"createdBy\": \"string\",\r\n    \"createdDate\": \"2023-11-22T10:49:52.690Z\",\r\n    \"lastModifiedBy\": \"string\",\r\n    \"lastModifiedDate\": \"2023-11-22T10:49:52.690Z\",\r\n    \"authorities\": [\r\n        \"string\"\r\n    ],\r\n    \"password\": \"12345\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register user with empty field password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 0,\r\n    \"login\": \"cat\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"cat@cat.com\",\r\n    \"imageUrl\": \"string\",\r\n    \"activated\": true,\r\n    \"langKey\": \"it\",\r\n    \"createdBy\": \"string\",\r\n    \"createdDate\": \"2023-11-22T10:49:52.690Z\",\r\n    \"lastModifiedBy\": \"string\",\r\n    \"lastModifiedDate\": \"2023-11-22T10:49:52.690Z\",\r\n    \"authorities\": [\r\n        \"string\"\r\n    ],\r\n    \"password\":\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mark account ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mark\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMzM1MDQ5NiwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA3NTg0OTZ9.7ae03Lku0H0LmboO9e_9VjxUJN8lGSZxAxQYK5X_QVloQkP7qIzCjF3R_0CvUGPPkOInDhuFyB1NiV68KwGrCg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/mark",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"mark"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Jessica account ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"jessica\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/jessica",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"jessica"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get student account ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/sv_student",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"sv_student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate admin Jessica account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 3961,\r\n  \"login\": \"jessica\",\r\n  \"firstName\": null,\r\n  \"lastName\": null,\r\n  \"email\": \"{{Admin jessica email}}\",\r\n  \"imageUrl\": null,\r\n  \"activated\": \"true\",\r\n  \"langKey\": \"en\",\r\n  \"createdBy\": \"anonymousUser\",\r\n  \"createdDate\": \"2023-11-22T10:48:18.811024Z\",\r\n  \"lastModifiedBy\": \"anonymousUser\",\r\n  \"lastModifiedDate\": \"2023-11-22T10:48:18.811024Z\",\r\n  \"authorities\": [\r\n    \"ROLE_ADMIN\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Mark account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 3964,\r\n  \"login\": \"mark\",\r\n  \"firstName\": null,\r\n  \"lastName\": null,\r\n  \"email\": \"{{Teacher email}}\",\r\n  \"imageUrl\": null,\r\n  \"activated\": \"true\",\r\n  \"langKey\": \"en\",\r\n  \"createdBy\": \"anonymousUser\",\r\n  \"createdDate\": \"2023-11-22T10:48:18.811024Z\",\r\n  \"lastModifiedBy\": \"anonymousUser\",\r\n  \"lastModifiedDate\": \"2023-11-22T10:48:18.811024Z\",\r\n  \"authorities\": [\r\n    \"ROLE_USER_TEACHER\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate student account without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 3966,\r\n  \"login\": \"volpe\",\r\n  \"firstName\": null,\r\n  \"lastName\": null,\r\n  \"email\": \"volpe@volpe.com\",\r\n  \"imageUrl\": null,\r\n  \"activated\": \"true\",\r\n  \"langKey\": \"en\",\r\n  \"createdBy\": \"anonymousUser\",\r\n  \"createdDate\": \"2023-11-22T10:48:18.811024Z\",\r\n  \"lastModifiedBy\": \"anonymousUser\",\r\n  \"lastModifiedDate\": \"2023-11-22T10:48:18.811024Z\",\r\n  \"authorities\": [\r\n    \"ROLE_USER_STUDENT\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get admin Jessica token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).toString;\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"jessica\",\r\n  \"password\": \"{{Admin jessica password}}\",\r\n  \"rememberMe\": true\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get teacher Mark token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).toString;\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"mark\",\r\n  \"password\": \"trentino2023\",\r\n  \"rememberMe\": true\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get student token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).toString;\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"sv_student\",\r\n  \"password\": \"trentino456\",\r\n  \"rememberMe\": true\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sv_admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).toString;\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"sv_admin\",\r\n  \"password\": \"trentino123\",\r\n  \"rememberMe\": true\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Jessica account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token Jessica admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mark account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token Mark teacher}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password valid token",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token Mark teacher}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"{{Teacher password}}\",\r\n    \"newPassword\": \"trentino2023\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/account/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password non valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token Jessica admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"{{Teacher 2nd password}}\",\r\n    \"newPassword\": \"trentino2024\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/account/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account",
								"change-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manage tasks",
			"item": [
				{
					"name": "Tasks",
					"item": [
						{
							"name": "Create new task according to the test case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token Jessica admin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"text\": \"Trentino\",\r\n    \"answer\": \"Dolomiti\",\r\n    \"title\": \"First test\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new task correctly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"const newTaskId = response.id\r",
											"pm.environment.set(\"taskId\", newTaskId);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token Jessica admin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomPhrase}}\",\r\n    \"answer\": \"{{$randomWords}}\",\r\n    \"title\": \"{{$randomNoun}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new task with non valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token student}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{$randomCatchPhrase}}\",\r\n    \"answer\": \"{{$randomWords}}\",\r\n    \"title\": \"{{$randomAbbreviation}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"pm.test(\"Task id not a string\", () => {\r",
											"    pm.expect(response[\"id\"]).not.to.be.string\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token Jessica admin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{taskId}},\r\n    \"text\": \"{{$randomWords}}\",\r\n    \"answer\": \"{{$randomPhrase}}\",\r\n    \"title\": \"{{$randomVerb}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskid"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token Jessica admin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{taskId}},\r\n    \"text\": \"{{$randomWords}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskid"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a task without specifying the task ID in the request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"pm.test(\"Status returns as Bad request\", () => {\r",
											"    pm.expect(response[\"title\"]).to.eql(\"Bad Request\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token Jessica admin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Et quam rerum ducimus voluptatem ut\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskid"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a task by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"pm.test(\"The task answer is a string\", () => {\r",
											"    pm.expect(response[\"answer\"]).to.be.string\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskid"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "1557"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"const taskId = response[0].id\r",
											"pm.test(\"Task id is not null\", () => {\r",
											"    pm.expect(taskId).not.to.be.null\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token Jessica admin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/tasks/:taskid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tasks",
										":taskid"
									],
									"variable": [
										{
											"key": "taskid",
											"value": "{{taskId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User tasks",
					"item": [
						{
							"name": "Create a user task according to the test case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXJrIiwiZXhwIjoxNzAzNTI1NDI3LCJhdXRoIjoiUk9MRV9VU0VSX1RFQUNIRVIiLCJpYXQiOjE3MDA5MzM0Mjd9.JwI2xZ6iuGCQ9ZiUw4IQAnpxSEIKXAl1-AcpzJMscNuP5IrEdmooHup2m_GBPPROljIZZTHOcrs6tWwfKlPAiQ",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"isSolved\": false,\r\n    \"user\": {\r\n        \"id\": 3964,\r\n        \"login\": \"mark\",\r\n        \"firstName\": \"string\",\r\n        \"lastName\": \"string\",\r\n        \"email\": \"string\",\r\n        \"activated\": true,\r\n        \"langKey\": \"string\",\r\n        \"imageUrl\": \"string\",\r\n        \"resetDate\": \"2023-11-24T17:31:30.917Z\"\r\n    },\r\n    \"task\": {\r\n        \"id\": 1557,\r\n        \"text\": \"string\",\r\n        \"answer\": \"string\",\r\n        \"title\": \"string\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a user task correctly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"const newUserTaskId = response.id\r",
											"pm.environment.set(\"userTaskId\", newUserTaskId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token Jessica admin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isSolved\": false,\r\n    \"user\": {\r\n        \"id\": 32257,\r\n        \"login\": \"sv_student\",\r\n        \"firstName\": \"string\",\r\n        \"lastName\": \"string\",\r\n        \"email\": \"string\",\r\n        \"activated\": true,\r\n        \"langKey\": \"string\",\r\n        \"imageUrl\": \"string\",\r\n        \"resetDate\": \"2023-11-24T17:31:30.917Z\"\r\n    },\r\n    \"task\": {\r\n        \"id\": 33472,\r\n        \"text\": \"Et quam rerum ducimus voluptatem ut\",\r\n        \"answer\": \"Quia aliquid numquam dignissimos et tempore impedit beatae\",\r\n        \"title\": \"Doloremque culpa non.\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user task with non valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token student}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{userTaskId}},\r\n    \"isSolved\": true£$%,\r\n    \"user\": {\r\n        \"id\": 32257,\r\n        \"login\": \"sv_student\",\r\n        \"firstName\": \"string\",\r\n        \"lastName\": \"string\",\r\n        \"email\": \"string\",\r\n        \"activated\": true,\r\n        \"langKey\": \"string\",\r\n        \"imageUrl\": \"string\",\r\n        \"resetDate\": \"2023-11-24T17:31:30.917Z\"\r\n    },\r\n    \"task\": {\r\n        \"id\": 33472,\r\n        \"text\": \"Et quam rerum ducimus voluptatem ut\",\r\n        \"answer\": \"Quia aliquid numquam dignissimos et tempore impedit beatae\",\r\n        \"title\": \"Doloremque culpa non.\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"const status = response.isSolved\r",
											"pm.test(\"User task status returns as true or false\", () => {\r",
											"    pm.expect(status).to.be.oneOf([true, false])\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzdl9zdHVkZW50IiwiZXhwIjoxNzAzNTI1OTYwLCJhdXRoIjoiUk9MRV9VU0VSX1NUVURFTlQiLCJpYXQiOjE3MDA5MzM5NjB9.UICT43r_nvIHvvJRQvRYpmY6YPHrBLB4DbLK52mxTzSj8c1JfaelRwCFp7rTMfTfshG8-RnZAGlMY-xDedPYlw",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{userTaskId}},\r\n    \"isSolved\": false,\r\n    \"user\": {\r\n        \"id\": 32257,\r\n        \"login\": \"sv_student\",\r\n        \"firstName\": \"string\",\r\n        \"lastName\": \"string\",\r\n        \"email\": \"string\",\r\n        \"activated\": true,\r\n        \"langKey\": \"string\",\r\n        \"imageUrl\": \"string\",\r\n        \"resetDate\": \"2023-11-24T17:31:30.917Z\"\r\n    },\r\n    \"task\": {\r\n        \"id\": 33472,\r\n        \"text\": \"Et quam rerum ducimus voluptatem ut\",\r\n        \"answer\": \"Quia aliquid numquam dignissimos et tempore impedit beatae\",\r\n        \"title\": \"Doloremque culpa non.\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all user tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"const taskIsSolved = response.filter((userTask) => userTask.isSolved === true)\r",
											"console.log(taskIsSolved)\r",
											"\r",
											"pm.environment.set(\"firstSolvedTask\", taskIsSolved[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token admin jessica}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user tasks by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"pm.test(\"Username is not null\", () => {\r",
											"    pm.expect(response[\"username\"]).not.to.be.null\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token teacher}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a user task by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"const userName = response.user.login\r",
											"pm.test(\"User login matches string\", () => {\r",
											"    pm.expect(userName).to.eql(\"sv_student\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token student}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () => {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token student}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/user-tasks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user-tasks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userTaskId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://sqlverifier-50d286d70656.herokuapp.com"
		},
		{
			"key": "Admin jessica email",
			"value": "jessica@gmail.com",
			"type": "string"
		},
		{
			"key": "Admin jessica password",
			"value": "dolomiti2023",
			"type": "string"
		},
		{
			"key": "Teacher email",
			"value": "mark.teacher@gmail.com",
			"type": "string"
		},
		{
			"key": "Token admin",
			"value": "",
			"type": "string"
		},
		{
			"key": "Token Jessica admin",
			"value": "",
			"type": "string"
		},
		{
			"key": "Token Mark teacher",
			"value": "",
			"type": "string"
		}
	]
}